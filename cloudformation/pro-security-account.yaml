AWSTemplateFormatVersion: '2010-09-09'
Description: Security Account stack (delegated admin, central EventBridge bus, SNS, remediation invoker role).

Parameters:
  OrgDelegatedAdmin:
    Type: String
    Default: 'true'
    AllowedValues: ['true','false']
    Description: Set true to register this account as delegated admin for GuardDuty & SecurityHub (requires org permissions).
  AlertsEmail:
    Type: String
    Description: Email for central alerts (confirm the subscription)
  CreateChatbot:
    Type: String
    Default: 'false'
    AllowedValues: ['true','false']
    Description: Create AWS Chatbot resources (manual Slack workspace link still needed).

Resources:
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ProLab Alerts

  AlertsSub:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertsTopic
      Protocol: email
      Endpoint: !Ref AlertsEmail

  CentralBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: prolab-central-bus

  CentralBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref CentralBus
      StatementId: AllowPutEventsFromAnyAccountInOrg
      Statement:
        Effect: Allow
        Principal: "*"
        Action: events:PutEvents
        Resource: !GetAtt CentralBus.Arn
        Condition:
          StringEquals:
            aws:PrincipalOrgID: !Ref AWS::OrganizationId

  RemediationInvokerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AllowAssumeIntoMembers
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: arn:aws:iam::*:role/ProLab-AutomationExecutionRole

  GuardDutyAdmin:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true

  GuardDutyAdminMember: 
    Type: AWS::GuardDuty::Master
    Condition: AlwaysFalse
    Properties:
      DetectorId: !Ref GuardDutyAdmin
      MasterId: !Ref AWS::AccountId

  SecurityHubEnable:
    Type: AWS::SecurityHub::Hub
    Properties: {}

  SecurityHubStandardsCIS:
    Type: AWS::SecurityHub::StandardsSubscription
    Properties:
      StandardsArn: !Sub arn:${AWS::Partition}:securityhub:${AWS::Region}::standards/cis-aws-foundations-benchmark/v/1.4.0

  SecurityHubStandardsFSBP:
    Type: AWS::SecurityHub::StandardsSubscription
    Properties:
      StandardsArn: !Sub arn:${AWS::Partition}:securityhub:${AWS::Region}::standards/aws-foundational-security-best-practices/v/1.0.0

Conditions:
  AlwaysFalse: !Equals ['A','B']

Outputs:
  CentralEventBusArn:
    Value: !GetAtt CentralBus.Arn
    Description: ARN to use from workload accounts as a target
  AlertsTopicArn:
    Value: !Ref AlertsTopic
    Description: Central alerts topic
